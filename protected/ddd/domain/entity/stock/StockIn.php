<?php
/**
 * Created by youyi000.
 * DateTime: 2018/3/8 14:36
 * Describe：
 */

namespace ddd\domain\entity\stock;


use ddd\Common\Domain\BaseEntity;
use ddd\Common\IAggregateRoot;
use ddd\domain\entity\value\Attachment;
use ddd\domain\event\stock\StockInEvent;
use ddd\domain\event\subscribe\EventSubscribeService;
use ddd\domain\tRepository\stock\StockInRepository;
use ddd\infrastructure\error\BusinessError;
use ddd\infrastructure\error\ExceptionService;

class StockIn extends BaseEntity implements IAggregateRoot
{
    /**
     * @var      bigint
     */
    public $id;
    /**
     * @var      bigint
     */
    public $stock_in_id;
    /**
     * @var      string
     */
    public $code;

    /**
     * @var      int
     */
    public $contract_id;

    /**
     * @var      int
     */
    public $lading_bill_id;

    /**
     * @var      date
     */
    public $entry_date;
    /**
     * @var      int
     */
    public $status;
    /**
     * @var      string
     */
    public $remark;

    /**
     * @var      array
     */
    public $items = array();

    /**
     * @var      int
     */
    public $store_id;

    /**
     * @var      string
     */
    public $transport;

    #endregion
    use StockInRepository;

    /**
     * 1：经仓
     * 2：直调
     * @var      int
     */
    public $type;

    public $files = array();


    function getId()
    {
        // TODO: Implement getId() method.
        return $this->id;
    }

    function getIdName()
    {
        // TODO: Implement getIdName() method.
        return "id";
    }

    function setId($value)
    {
        $this->id=$value;
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

    }

    public function generateId()
    {
        $this->id = \IDService::getStockInId();
    }

    /**
     * @param LadingBill|null $ladingBill
     * @return StockIn
     * @throws \Exception
     */
    public static function create(LadingBill $ladingBill = null)
    {
        $entity = new StockIn();
        if (!empty($ladingBill))
        {
            $entity->lading_bill_id = $ladingBill->getId();
        }
        $entity->status = \StockIn::STATUS_NEW;
        if (is_array($entity->items))
        {
            foreach ($entity->items as $g)
            {
                $item = StockInItem::create($g->goods_id);
                $entity->addItem($item);
            }
        }

        return $entity;
    }

    /**
     * 判断当前商品项是否已经存在
     * @param $goodsId
     * @return bool
     */
    public function goodsIsExists($goodsId)
    {
        return isset($this->items[$goodsId]);
    }


    /**
     *
     * @param StockInItem $item
     * @return bool
     * @throws \Exception
     */
    public function addItem(StockInItem $item)
    {
        if (empty($item))
        {
            ExceptionService::throwArgumentNullException("StockInItem对象", array('class' => get_class($this), 'function' => __FUNCTION__));
        }
        $goodsId = $item->goods_id;
        if ($this->goodsIsExists($goodsId))
        {
            ExceptionService::throwBusinessException(BusinessError::Stock_In_Goods_Is_Exists, array("goods_id" => $goodsId,));
        }
        $this->items[$goodsId] = $item;

        return true;
    }


    /**
     * 添加入库商品附件
     * @param Attachment $file
     * @return bool
     * @throws \Exception
     */
    public function addFiles(Attachment $file)
    {
        if (empty($file))
        {
            ExceptionService::throwArgumentNullException("Attachment对象", array('class' => get_class($this), 'function' => __FUNCTION__));
        }

        $this->files[$file->id] = $file;

        return true;
    }

    /**
     * 添加附件
     * @param Attachment $item
     * @return bool
     * @throws \Exception
     */
    public function addFilesItems(\ddd\domain\entity\Attachment $item)
    {
        if (empty($item))
        {
            ExceptionService::throwArgumentNullException("DeliveryOrderSettlementItem对象", array('class' => get_class($this), 'function' => __FUNCTION__));
        }
        
        $id = $item->id;
        
        $this->files[$id] = $item;
        
        return true;
        
    }

    /**
     * @param    int $goodsId
     */
    public function removeItem($goodsId)
    {
        // TODO: implement
    }

    /**
     */
    public function trash()
    {
        // TODO: implement
    }

    /**
     */
    public function submit()
    {
        // TODO: implement
    }

    /**
     */
    public function done()
    {
        // TODO: implement
    }

    /**
     */
    public function recall()
    {
        // TODO: implement
    }

    /**
     * 创建库存，返回库存数组格式 goods_id=>Stock
     * @return array|null
     * @throws \Exception
     */
    public function createStock()
    {
        // TODO: implement
        if (!$this->isStockIn())
        {
            throw new \Exception("入库单" . $this->code . "还没有完成入库，不能创建库存");
        }

        if (!is_array($this->items))
        {
            return null;
        }
        $stocks = [];
        foreach ($this->items as $k => $item)
        {
            $stocks[$item->goods_id] = Stock::create($this, $item);
        }

        return $stocks;
    }

    /**
     * 是否已经完成入库
     * @return bool
     */
    public function isStockIn()
    {
        return $this->status >= \StockIn::STATUS_PASS;
    }

    /**
     * @desc 入库单审批通过
     * @throws \CException
     */
    public function checkPass()
    {
        EventSubscribeService::bind($this, "onCheckPass", EventSubscribeService::StockInPassEvent);
        $this->afterPass();
    }

    /**
     * 当入库单审批通过后
     * @throws \CException
     */
    public function afterPass()
    {
        if ($this->hasEventHandler('onCheckPass'))
        {
            $this->onCheckPass(new StockInEvent($this));
        }
    }

    /**
     * 响应入库单审批通过事件
     * @param $event
     * @throws \CException
     */
    public function onCheckPass($event)
    {
        $this->raiseEvent('onCheckPass', $event);
    }

    /**
     * 设为已结算
     * @throws \Exception
     */
    public function setSettledAndSave()
    {
        $this->status = \StockIn::STATUS_SETTLED;
        $this->getStockInRepository()->setSettled($this);
    }
}