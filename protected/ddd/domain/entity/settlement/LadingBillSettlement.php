<?php
/**
 * Created by vector.
 * DateTime: 2018/3/21 11:35
 * Describe：提单结算
 */

namespace ddd\domain\entity\settlement;


use ddd\domain\entity\stock\LadingBill;
use ddd\domain\entity\value\Currency;
use ddd\domain\event\contractSettlement\LadingBillSettlementEvent;
use ddd\domain\event\contractSettlement\LadingBillSettlementRejectEvent;
use ddd\domain\event\contractSettlement\LadingBillSettlementSubmitEvent;
use ddd\domain\event\subscribe\EventSubscribeService;
use ddd\domain\iRepository\contractSettlement\ILadingBillSettlementRepository;
use ddd\domain\service\stock\LadingBillService;
use ddd\infrastructure\DIService;
use ddd\infrastructure\Utility;
use ddd\infrastructure\error\BusinessError;
use ddd\infrastructure\error\ZException;
use ddd\repository\contract\ContractRepository;

class LadingBillSettlement extends Settlement
{
    
    /**
    * @var      bigint
    */
    public $batch_id;

    /**
     * @var ILadingBillSettlementRepository
     */
    protected $repository;

    public function init()
    {
        $this->getRepository();
        parent::init(); // TODO: Change the autogenerated stub

    }

    /**
     * 获取仓储
     * @return ILadingBillSettlementRepository|object
     * @throws \Exception
     */
    protected function getRepository()
    {
        if (empty($this->repository))
        {
            $this->repository=DIService::getRepository(ILadingBillSettlementRepository::class);
        }
        return $this->repository;
    }
    
    /**
     * 创建提单结算单对象
     * @param LadingBill $ladingBill
     * @return LadingBillSettlement
     * @throws \Exception
     */
    public static function create(LadingBill $ladingBill)
    {
        if(empty($ladingBill))
       		throw new ZException("参数LadingBill对象为Null");
        
        $contract = ContractRepository::repository()->findByPk($ladingBill->contract_id);
        if($contract->settle_type==SettlementMode::BUY_CONTRACT_MODE_SETTLEMENT)
            throw new ZException(BusinessError::Now_Settle_Mode_Is_Buy_Contract_Settle,array("contract_code"=>$contract->contract_code));

        $isBoolAndMsg = LadingBillService::service()->isCanSettle($ladingBill);
        if($isBoolAndMsg !== true)
            throw new ZException($isBoolAndMsg);
       
        $entity = new LadingBillSettlement();
        $entity->batch_id        =  $ladingBill->id;
        $entity->contract_id     =  $ladingBill->contract_id;
        $entity->settle_currency =  Currency::getCurrency($ladingBill->currency);
        $entity->status          =  SettlementStatus::STATUS_NEW;
  
        // $entity->status_time=Utility::getDateTime();
        if(is_array($ladingBill->items) && !empty($ladingBill->items)) {
            foreach ($ladingBill->items as $g)
            {
                $item = GoodsSettlement::create($g->goods_id);
                $item->relation_id     = $ladingBill->id;
                $item->bill_quantity   = $g->in_quantity;
                $item->settle_quantity = $g->in_quantity;
                $item->loss_quantity   = new Quantity(0, $g->in_quantity->unit);
                $flag = false;
                if(!empty($g->in_quantity->unit) && $g->in_quantity->unit!=$g->in_quantity_sub->unit){
                    $flag = true;
                    $item->bill_quantity_sub   = $g->in_quantity_sub;
                    $item->settle_quantity_sub = $g->in_quantity_sub;
                    $item->loss_quantity_sub   = new Quantity(0, $g->in_quantity_sub->unit);
                }
  
                $billItem = BillSettlementItem::create($g->goods_id);
                $billItem->item_id         = $item->item_id;
                $billItem->bill_id         = $ladingBill->id;
                $billItem->bill_quantity   = $g->in_quantity;
                $billItem->settle_quantity = $g->in_quantity;
                $billItem->loss_quantity   = new Quantity(0, $g->in_quantity->unit);
                if($flag) {
                    $billItem->bill_quantity_sub   = $g->in_quantity_sub;
                    $billItem->settle_quantity_sub = $g->in_quantity_sub;
                    $billItem->loss_quantity_sub   = new Quantity(0, $g->in_quantity_sub->unit);
                }
                $item->addBillSettlementItem($billItem);
  
                $entity->addGoodsSettlement($item);
            }
        }
        return $entity;
    }

    /**
     * 提单结算提交
     * @throws \CException
     */
    public function submit()
    {
        $this->status = SettlementStatus::STATUS_SUBMIT;
        $this->repository->submit($this);

        $this->afterSubmit();
    }

    /**
     * 提单结算提交后
     * @throws \CException
     */
    public function afterSubmit()
    {
        EventSubscribeService::bind($this,"onAfterSubmit", EventSubscribeService::LadingBillSettlementSubmitEvent);
        if($this->hasEventHandler('onAfterSubmit'))
            $this->onAfterSubmit(new LadingBillSettlementSubmitEvent($this));
    }

    /**
     * 响应提单提交事件
     * @param  $event
     * @throws \CException 
     */
    public function onAfterSubmit($event)
    {
        $this->raiseEvent('onAfterSubmit', $event);
    }

    public function checkPass()
    {
        $this->status = SettlementStatus::STATUS_PASS;
        $this->status_time = Utility::getNow();
        $this->repository->setSettled($this);
//        $this->repository->updateContractSettlementAmount($this);

        $this->afterCheckPass();
    }

    public function afterCheckPass()
    {
        EventSubscribeService::bind($this,"onAfterCheckPass", EventSubscribeService::LadingBillSettlementPassEvent);
        if($this->hasEventHandler('onAfterCheckPass'))
            $this->onAfterCheckPass(new LadingBillSettlementEvent($this));
    }

    public function onAfterCheckPass($event)
    {
        $this->raiseEvent('onAfterCheckPass', $event);
    }


    public function checkBack()
    {
        $this->status = SettlementStatus::STATUS_BACK;
        $this->repository->back($this);

        $this->afterCheckBack();
    }

    public function afterCheckBack()
    {
        EventSubscribeService::bind($this,"onAfterCheckBack", EventSubscribeService::LadingBillSettlementBackEvent);
        if($this->hasEventHandler('onAfterCheckBack'))
            $this->onAfterCheckBack(new LadingBillSettlementRejectEvent($this));
    }

    public function onAfterCheckBack($event)
    {
        $this->raiseEvent('onAfterCheckBack', $event);
    }


    /**
     * 生成编号
     */
    public function generateId()
    {
         $this->settle_id=\IDService::getLadingSettlementId();
    }

    /**
     * 生成编码
     */
    public function generateCode()
    {
        $this->code=\IDService::getLadingSettlementCode();
    }

}