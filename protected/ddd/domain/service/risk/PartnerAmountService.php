<?php
/**
 * Created by youyi000.
 * DateTime: 2018/3/12 10:00
 * Describe：
 */

namespace ddd\domain\service\risk;


use ddd\domain\entity\contract\Contract;
use ddd\domain\entity\risk\PartnerAmount;
use ddd\domain\entity\risk\PartnerContractAmount;
use ddd\domain\entity\risk\PartnerContractAmountLog;
use ddd\domain\eventHandler\contract\ContractSubmitEvent;
use ddd\infrastructure\error\ExceptionService;
use ddd\repository\risk\PartnerContractAmountLogRepository;
use ddd\repository\risk\PartnerContractAmountRepository;
use ddd\repository\PartnerRepository;

class PartnerAmountService
{
    /**
     * @var IAmountEventHandler
     */
    public $eventHandler;
    protected $partnerAmount;
    protected $repository;
    protected $logRepository;


    public function __construct($eventHandler=null)
    {
        if(!empty($eventHandler))
            $this->eventHandler=$eventHandler;
        $this->init();
    }

    protected function init()
    {

    }

    /**
     * 更新金额
     * @throws \Exception
     */
    public function updateAmount()
    {
        if (empty($this->eventHandler))
        {
            ExceptionService::throwArgumentNullException("事件", array("class" => __CLASS__, "function" => __FUNCTION__));
        }

        $partnerId = $this->eventHandler->getPartnerId();
        if (empty($partnerId))
            throw new \Exception("无法获取合作方信息");

        $this->partnerAmount = $this->loadPartnerAmountEntity($partnerId);

        $amount = $this->eventHandler->getAmount();
        if ($amount != 0) {
            if ($amount > 0)
                $this->partnerAmount->addAmount($amount);
//                $this->addAmount($amount);
            else
                $this->partnerAmount->subtractAmount(abs($amount));
//                $this->subtractAmount(abs($amount));

            $log = $this->createPartnerAmountLogEntity();
            $contractData = $this->eventHandler->getContractInfo();
            $log->contract_id = $contractData['contract_id'];
            $log->project_id = $contractData['project_id'];
            $log->corporation_id = $contractData['corporation_id'];
            $log->partner_id = $partnerId;
            $log->amount = abs($amount);
            $log->amount_total = $this->partnerAmount->amount;
            $log->initMethod($amount);
            $log->category = $this->eventHandler->getCategory();
            $log->relation_id = $this->eventHandler->getRelationId();
            $log->remark = $this->eventHandler->event->eventName;
            $this->logRepository->store($log);
        }
    }

    /**
     * 加载合作方额度对象
     * @param $partnerId
     * @return mixed
     * @throws \Exception
     */
    protected function loadPartnerAmountEntity($partnerId)
    {
        $this->partnerAmount=$this->repository->findByPartnerId($partnerId);
        if(empty($this->partnerAmount))
            ExceptionService::throwEntityInstanceNotExistsException($partnerId,"PartnerAmount");
        return $this->partnerAmount;
    }

    /**
     * 创建变更记录对象
     * @return mixed
     */
    protected function createPartnerAmountLogEntity()
    {
        return $this->logRepository->getNewEntity();
    }

    /**
     * 增加金额
     * @param $amount
     */
    /*protected function addAmount($amount)
    {
        $this->repository->addAmount($this->partnerAmount,$amount);
        $this->partnerAmount->addAmount($amount); // TODO: Change the autogenerated stub
    }*/

    /**
     * 减少金额
     * @param $amount
     */
    /*protected function subtractAmount($amount)
    {
        $this->repository->subtractAmount($this->partnerAmount,$amount);
        $this->partnerAmount->subtractAmount($amount); // TODO: Change the autogenerated stub
    }*/
}