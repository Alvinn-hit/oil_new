<?php

/**
 * Desc:
 * User: susiehuang
 * Date: 2018/3/16 0016
 * Time: 9:51
 */

namespace ddd\Contract\Domain\Model\Project;

use ddd\domain\entity\contract\Contract;
use ddd\domain\event\project\ProjectRejectEvent;
use ddd\domain\event\project\ProjectSubmitEvent;
use ddd\domain\event\subscribe\EventSubscribeService;
use ddd\Common\IAggregateRoot;
use ddd\Common\Domain\BaseEntity;

use ddd\infrastructure\Utility;

class Project extends BaseEntity implements IAggregateRoot
{
    use ProjectRepository;
    
    #region Event

    /**
     * 项目提交事件
     */
    const EVENT_AFTER_SUBMIT="onAfterSubmit";

    /**
     * 驳回事件
     */
    const EVENT_AFTER_REJECT="onAfterReject";

    /**
     * 合同完结事件
     */
    const EVENT_AFTER_DONE="onAfterDone";

    #endregion

    #region public property

    /**
     * project_id
     * @var      ProjectId
     */
    public $project_id;

    /**
     * 交易主体
     * @var      int
     */
    public $corporation_id=0;

    /**
     * 项目编号
     * @var      string
     */
    public $project_code;

    /**
     * 项目类型
     * @var      int
     */
    public $type=0;

    /**
     * 项目名称
     * @var      string
     */
    public $project_name;

    /**
     * 项目负责人
     * @var      int
     */
    public $manager_user_id=0;

    /**
     * 是否可以退回
     * @var      bool
     */
    public $is_can_back=true;

    /**
     * 状态
     * @var      int
     */
    public $status;

    /**
     * 状态时间
     * @var      int
     */
    public $status_time;

    /**
     * 开始日期
     * @var      date
     */
    public $start_date;

    /**
     * 截止日期
     * @var      date
     */
    public $end_date;

    /**
     * 说明
     * @var      string
     */
    public $remark;

    /**
     * 项目概况
     * @var      ProjectDetail
     */
    public $detail;

    #endregion

    /**
     * @var IProjectRepository
     */
    //protected $repository;

    /**
     * 获取id
     * @return int
     */
    public function getId()
    {
        return $this->project_id->id;
    }

    function setId($value)
    {
        return $this->project_id=new ProjectId($value);
    }

    /**
     * @throws \Exception
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->project_id=new ProjectId();
        $this->detail=new ProjectDetail();
    }

    /**
     * 事件配置，事件名必须以on开头，否则无效
     * @return array
     */
    protected function events()
    {
        return [
            static::EVENT_AFTER_SUBMIT,
            static::EVENT_AFTER_REJECT,
            static::EVENT_AFTER_DONE,
        ];
    }


    /**
     * 获取仓储
     * @return IProjectRepository|object
     * @throws \Exception
     */
    /*protected function getRepository()
    {
        if (empty($this->repository))
        {
            $this->repository=DIService::getRepository(IProjectRepository::class);
        }
        return $this->repository;
    }*/

    /**
     * Project
     * @param int $id
     * @return Project
     * @throws \Exception
     */
    public static function create($id=0)
    {
        $entity=new Project();
        if(!empty($id))
            $entity->setId($id);
        $entity->status=ProjectStatus::STATUS_NEW;
        return $entity;
    }

    /**
     * 驳回
     * @param bool $persistent 是否持久化，默认为true
     * @throws \Exception
     */
    public function reject($persistent=true)
    {
        // TODO: implement
        $this->status=\Project::STATUS_BACK;
        $this->status_time=Utility::getNow();
        if($persistent)
            $this->getProjectRepository()->reject($this);

        $this->publishEvent(static::EVENT_AFTER_REJECT,new ProjectRejectEvent($this));
    }

    /**
     * @throws \Exception
     */
    /*protected function afterReject()
    {
        EventSubscribeService::bind($this,static::EVENT_AFTER_REJECT,EventSubscribeService::ProjectRejectEvent);
        if($this->hasEventHandler(static::EVENT_AFTER_REJECT))
            $this->onAfterSubmit(new ProjectRejectEvent($this));
    }*/

    /**
     * 作废
     * @param bool $persistent 是否持久化，默认为true
     * @throws \Exception
     */
    public function trash($persistent=true)
    {
        // TODO: implement
        $this->status=\Project::STATUS_STOP;
        $this->status_time=Utility::getNow();
        if($persistent)
            $this->getProjectRepository()->trash($this);
    }

    /**
     * 是否可以提交
     * @return bool
     */
    public function isCanSubmit()
    {
        return $this->status>\Project::STATUS_STOP && $this->status<\Project::STATUS_SUBMIT;
    }

    /**
     * 提交
     * @param bool $persistent 是否持久化，默认为true
     * @throws \Exception
     */
    public function submit($persistent=true)
    {
        // TODO: implement
        $this->status=ProjectStatus::STATUS_SUBMIT;
        $this->status_time=Utility::getNow();

        if($persistent)
            $this->getProjectRepository()->submit($this);
        $this->publishEvent(static::EVENT_AFTER_SUBMIT,new ProjectSubmittedEvent($this));
    }

    /**
     * @throws \Exception
     */
    /*protected function afterSubmit()
    {
        $this->publishEvent(static::EVENT_AFTER_SUBMIT,new ProjectSubmittedEvent($this));

    }*/

    /**
     * 监听事件
     * @param $event
     * @throws \Exception
     */
    /*protected function onAfterSubmit($event)
    {
        $this->raiseEvent(static::EVENT_AFTER_SUBMIT, $event);
    }*/

    /**
     * 生成合同
     * @return Contract
     * @throws \Exception
     */
    public function createContract()
    {
        // TODO: implement
        return Contract::create($this);
    }

    /**
     * 设置不可驳回
     * @param bool $persistent 是否持久化，默认为true
     * @throws \Exception
     */
    public function setCannotBack($persistent=true)
    {
        // TODO: implement
        if(!$this->isCanBack())
            return;
        $this->is_can_back=false;
        if($persistent)
            $this->getProjectRepository()->saveCannotBack($this);
    }

    /**
     * 是否可以驳回
     * @return bool
     */
    public function isCanBack()
    {
        return $this->is_can_back;
    }


}