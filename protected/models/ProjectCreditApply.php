<?php

/**
 * Created by youyi000.
 * DateTime: 2017/4/11 11:28
 * Describe：
 */
class ProjectCreditApply extends BaseActiveRecord
{

    const STATUS_SUBMIT=2;//已申请待确认
    const STATUS_REJECT=-1;//已拒绝
    const STATUS_TRASH=-3;//已作废
    const STATUS_CONFIRM=6;//已确认
    const STATUS_USED=9;//已使用

    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    public function tableName()
    {
        return "t_project_credit_apply";
    }

    public function beforeSave()
    {
        if ($this->isNewRecord)
        {
            if (empty($this->create_time))
                $this->create_time = new CDbExpression("now()");
            if (empty($this->create_user_id))
                $this->create_user_id= Utility::getNowUserId();
        }
        if ($this->update_time == $this->getOldAttribute("update_time"))
        {
            $this->update_time = new CDbExpression("now()");
            $this->update_user_id = Utility::getNowUserId();
        }
        return parent::beforeSave(); // TODO: Change the autogenerated stub
    }

    public function relations()
    {
        return array(
            'items'=>array(self::HAS_MANY , 'ProjectCreditApplyDetail', 'apply_id',),
        );
    }

    /**
     * 确认通过额度占用申请
     *  1、更新额度占用申请的状态
     *  2、更新项目额度中的个人额度占用数据
     * @return bool|string
     * @throws Exception
     */
    public function confirm()
    {
        $trans=$this->dbConnection->getCurrentTransaction();
        if(!empty($trans))
            $isInDbTrans=true;
        else
            $isInDbTrans=false;

        if(!$isInDbTrans)
        {
            $trans = $this->dbConnection->beginTransaction();
        }

        try {

            $this->status=self::STATUS_CONFIRM;
            $this->status_time=new CDbExpression("now()");

            $res=parent::save(true,array("status","status_time","update_time","update_user_id"));
            if($res)
            {
                $projectCredit = ProjectCredit::model()->find("project_id=" . $this->project_id);
                if (empty($projectCredit->project_id))
                {
                    $projectCredit = new ProjectCredit();
                    $projectCredit->project_id = $this->project_id;
                }
                $projectCredit->effect_apply_id=$this->apply_id;
                $projectCredit->user_amount += $this->user_amount;
                $projectCredit->other_amount += $this->other_amount;

                $projectCredit->save();
            }

            if(!$isInDbTrans)
            {
                $trans->commit();
            }
            return $res;
        } catch (Exception $e) {
            if(!$isInDbTrans)
            {
                try { $trans->rollback(); }catch(Exception $ee){}
                return $e->getMessage();
            }
            else
                throw $e;
        }
    }

    /**
     * 拒绝项目额度个人占用申请
     *  1、更新额度占用申请的状态
     *  2、把已经通过的个人占用申请标记为他人拒绝并解冻已经冻结的个人额度
     *  3、把待确认的个人占用申请标记为他人已拒绝
     * @return bool|string
     * @throws Exception
     */
    public function reject()
    {
        $trans=$this->dbConnection->getCurrentTransaction();
        if(!empty($trans))
            $isInDbTrans=true;
        else
            $isInDbTrans=false;

        if(!$isInDbTrans)
        {
            $trans = $this->dbConnection->beginTransaction();
        }

        try {

            $this->status=self::STATUS_REJECT;
            $this->status_time=new CDbExpression("now()");

            $res=parent::save(true,array("status","status_time","update_time","update_user_id"));
            if($res)
            {
                $details=ProjectCreditApplyDetail::model()->findAll("apply_id=".$this->apply_id." and status<>".ProjectCreditApplyDetail::STATUS_REJECT."");
                foreach ($details as $detail)
                {
                    if($detail->status==ProjectCreditApplyDetail::STATUS_CONFIRM)
                    {
                        $r=UserCreditService::unFreezeUserCreditAmount($detail->user_id,$detail->amount);
                        if(!$r)
                            throw new Exception("解除用户".$detail->user_id."已冻结额度操作出错！");
                    }
                    $detail->status=ProjectCreditApplyDetail::STATUS_REJECT_OTHER;
                    $detail->status_time=new CDbExpression("now()");
                    $detail->save(true,array("status","status_time","update_time","update_user_id"));
                }
            }
            else
                throw new Exception("保存出错");

            if(!$isInDbTrans)
            {
                $trans->commit();
            }
            return $res;
        } catch (Exception $e) {
            if(!$isInDbTrans)
            {
                try { $trans->rollback(); }catch(Exception $ee){}
                return $e->getMessage();
            }
            else
                throw $e;
        }
    }

    /**
     * 取消额度申请操作
     * @return bool|string
     * @throws Exception
     */
    public function cancel()
    {
        $trans=$this->dbConnection->getCurrentTransaction();
        if(!empty($trans))
            $isInDbTrans=true;
        else
            $isInDbTrans=false;

        if(!$isInDbTrans)
        {
            $trans = $this->dbConnection->beginTransaction();
        }

        try {

            if($this->status==self::STATUS_USED)
                throw new Exception("额度占用已经生效，不能作废取消");

            $this->status=self::STATUS_TRASH;
            $this->status_time=new CDbExpression("now()");

            $res=parent::save(true,array("status","status_time","update_time","update_user_id"));
            if($res)
            {
                $details=ProjectCreditApplyDetail::model()->findAll("apply_id=".$this->apply_id."");
                foreach ($details as $detail)
                {
                    if($detail->status==ProjectCreditApplyDetail::STATUS_CONFIRM)
                    {
                        $r=UserCreditService::unFreezeUserCreditAmount($detail->user_id,$detail->amount);
                        if(!$r)
                            throw new Exception("解除用户".$detail->user_id."已冻结额度操作出错！");
                    }
                    $detail->status=ProjectCreditApplyDetail::STATUS_TRASH;
                    $detail->status_time=new CDbExpression("now()");
                    $detail->save(true,array("status","status_time","update_time","update_user_id"));
                }

                /*ProjectCreditApplyDetail::model()->updateAll(array("status"=>self::STATUS_TRASH,"status_time"=>new CDbExpression("now()")),
                    array("condition"=>"apply_id=".$this->apply_id.""));*/

                if($this->getOldAttribute("status")==self::STATUS_CONFIRM)
                {
                    $projectCredit = ProjectCredit::model()->find("project_id=" . $this->project_id);
                    if (empty($projectCredit->project_id))
                    {
                        $projectCredit = new ProjectCredit();
                        $projectCredit->project_id = $this->project_id;
                    }
                    $projectCredit->effect_apply_id = 0;
                    $projectCredit->user_amount -= $this->user_amount;
                    $projectCredit->other_amount -= $this->other_amount;
                    $projectCredit->save();
                }
            }

            if(!$isInDbTrans)
            {
                $trans->commit();
            }
            return $res;
        } catch (Exception $e) {
            if(!$isInDbTrans)
            {
                try { $trans->rollback(); }catch(Exception $ee){}
                return $e->getMessage();
            }
            else
                throw $e;
        }
    }

    /**
     * 生效额度占用
     * @param $managerUserId 项目负责人
     * @return bool|string
     * @throws Exception
     */
    public function effect($managerUserId)
    {
        $trans=$this->dbConnection->getCurrentTransaction();
        if(!empty($trans))
            $isInDbTrans=true;
        else
            $isInDbTrans=false;

        if(!$isInDbTrans)
        {
            $trans = $this->dbConnection->beginTransaction();
        }

        try {

            $this->status=self::STATUS_USED;
            $this->status_time=new CDbExpression("now()");

            $res=parent::save(true,array("status","status_time","update_time","update_user_id"));
            if($res)
            {
                $details=ProjectCreditApplyDetail::model()->findAll("apply_id=".$this->apply_id." and status=".ProjectCreditApplyDetail::STATUS_CONFIRM."");
                foreach ($details as $detail)
                {
                    $r=UserCreditService::effectFrozenCreditAmount($detail->user_id,$detail->amount);
                    if(!$r)
                        throw new Exception("生效用户".$detail->user_id."的冻结额度操作出错！");

                    $detail->status=ProjectCreditApplyDetail::STATUS_USED;
                    $detail->status_time=new CDbExpression("now()");
                    $detail->save(true,array("status","status_time","update_time","update_user_id"));

                    $usedDetail=new UserCreditUseDetail();
                    $usedDetail->user_id=$detail->user_id;
                    $usedDetail->project_id=$detail->project_id;
                    $usedDetail->type=($detail->user_id==$managerUserId)?0:1;
                    $usedDetail->amount=$detail->amount;
                    $usedDetail->apply_detail_id=$detail->detail_id;
                    $usedDetail->status_time=new CDbExpression("now()");
                    $usedDetail->save();
                }
            }
            else
                throw new Exception("保存出错");

            if(!$isInDbTrans)
            {
                $trans->commit();
            }
            return $res;
        } catch (Exception $e) {
            if(!$isInDbTrans)
            {
                try { $trans->rollback(); }catch(Exception $ee){}
                return $e->getMessage();
            }
            else
                throw $e;
        }
    }

}